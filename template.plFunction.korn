
----------- Call print error 
    PROCEDURE P_PRINT_ERROR IS
    BEGIN
        P_{tableName}PF_ERROR_LOG(v_process_seq,
                              v_error_seq,
                              v_strerrorcode,
                              v_strerrordesc,
                              v_uniq,
                              {keyParameter});
    END;


----------- validate null with expect value 
    PROCEDURE P_validate_null_expectvalue(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2,
                               EVALUE    IN VARCHAR2
                               ) IS
    BEGIN
      IF trim(NVALUE) is not null THEN
        IF trim(NVALUE)=EVALUE THEN
          NULL;
        ELSE
          v_error_seq    := v_error_seq + 1;
          v_iserror      := 1;
          v_strerrorcode := FNAME||' must be '||EVALUE||'';
          v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||':' || trim(EVALUE) || ' is not '||EVALUE||' ';
          P_PRINT_ERROR();
        END IF;
      ELSE
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      END IF;
    END;



----------- validate null with expect multiple value 
    PROCEDURE P_validate_null_expectvalues(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2,
                               EVALUE    IN VARCHAR2,
                               EVALUE2    IN VARCHAR2
                               ) IS
    BEGIN
      IF trim(NVALUE) is not null THEN
        IF trim(NVALUE)=EVALUE or trim(NVALUE)=EVALUE2 THEN
          NULL;
        ELSE
          v_error_seq    := v_error_seq + 1;
          v_iserror      := 1;
          v_strerrorcode := FNAME||' must be '||EVALUE||'';
          v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||':' || trim(NVALUE) || ' is not '||EVALUE||' or '||EVALUE2;
          P_PRINT_ERROR();
        END IF;
      ELSE
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      END IF;
    END;


----------- validate null 
    PROCEDURE P_validate_null(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2
                               ) IS
    BEGIN
      IF trim(NVALUE) is not null THEN
        null;
      ELSE
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      END IF;
    END;


----------- validate null with expect value in table template
    PROCEDURE P_validate_null_intemplate(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2,
                              NTABLE IN VARCHAR2
                               ) IS
    BEGIN
      if trim(NVALUE) is not null then
        SELECT nvl(COUNT(1), 0) cnt
          INTO v_cnt
          FROM DESCPF dc
         WHERE dc.descpfx = 'IT'
           AND dc.desccoy IN ('2', '9')
           AND dc.language = 'E'
           AND trim(dc.desctabl) = NTABLE
           AND trim(dc.descitem) = NVALUE;
      
        IF v_cnt = 0 THEN
          v_error_seq    := v_error_seq + 1;
          v_iserror      := 1;
          v_strerrorcode := FNAME||' must be  in '||NTABLE;
          v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': ' ||
                            NVALUE || ' not in '||NTABLE;
          P_PRINT_ERROR();
        END IF;
      else
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      end if;
    END;
    
    

----------- validate null and pattern CCYY between 2000 and 2015
    PROCEDURE P_validate_null_CCYY(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2
                               ) IS
    BEGIN
      if trim(NVALUE) is not null then
        if trim(NVALUE) between 2000 and 2015 then
          null;
        else
          v_error_seq    := v_error_seq + 1;
          v_iserror      := 1;
          v_strerrorcode := FNAME||' must be ''CCYY'' format';
          v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': ' || trim(NVALUE) || ' is not format ''CCYY'' ';
          P_PRINT_ERROR();
        end if;
      else
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      end if;      
    END;

----------- validate null and pattern 'CCYYMMDD'
    PROCEDURE P_validate_null_CCYYMMDD(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2
                               ) IS
    BEGIN
      if trim(NVALUE) is not null then
        BEGIN
          SELECT TO_DATE(NVALUE, 'YYYYMMDD')
            INTO v_isdt
            FROM DUAL;
        EXCEPTION
          WHEN OTHERS THEN
            v_error_seq    := v_error_seq + 1;
            v_iserror      := 1;
            v_strerrorcode := FNAME||' format value must be CCYYMMDD';
            v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': ' ||
                              NVALUE ||
                              ' format is not CCYYMMDD';
            P_PRINT_ERROR();
        END;
      else
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      end if;
    END;
    
    
----------- validate null and pattern 'CCMMDD'
    PROCEDURE P_validate_null_CCMMDD(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2
                               ) IS
    BEGIN
      IF trim(NVALUE) is not null THEN
        BEGIN
          SELECT TO_DATE(lpad(trim(NVALUE), 6, '0'), 'YYMMDD')
            INTO v_isdt
            FROM DUAL;
        EXCEPTION
          WHEN OTHERS THEN
            v_error_seq    := v_error_seq + 1;
            v_iserror      := 1;
            v_strerrorcode := FNAME||' format value must be CCMMDD';
            v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': ' ||
                              Trim(NVALUE) || ' format is not CCMMDD';
            P_PRINT_ERROR();
        END;
      ELSE
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      END IF;
    END;


----------- validate null and pattern 'MM' check between 1 and 12
    PROCEDURE P_validate_null_MM(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2
                               ) IS
    BEGIN
      if trim(NVALUE) is not null then
        if trim(NVALUE) between 1 and 12 then
          null;
        else
          v_error_seq    := v_error_seq + 1;
          v_iserror      := 1;
          v_strerrorcode := FNAME||' must be ''MM'' format';
          v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': ' || trim(NVALUE) || ' is not format ''MM'' ';
          P_PRINT_ERROR();
        end if;
      else
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      end if;
    END;




----------- validate null and pattern 'HHMMSS'
    PROCEDURE P_validate_null_HHMMSS(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2
                               ) IS
    BEGIN
      if trim(NVALUE) is not null then
          BEGIN
            SELECT to_date(LPAD(NVALUE, 6, '0'), 'HH24MISS')
              inTO v_isdt
              from dual;
          EXCEPTION
            WHEN OTHERS THEN
              v_error_seq    := v_error_seq + 1;
              v_iserror      := 1;
              v_strerrorcode := FNAME||' format value must be HHMMSS';
              v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq ||
                                ' '||FNAME||': ' || NVALUE ||
                                ' format is not HHMMSS';
              P_PRINT_ERROR();
          END;
      else
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      end if;
    END;




----------- validate null and pattern length
    PROCEDURE P_validate_null_length(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2,
                              NLENGTH IN VARCHAR2
                               ) IS
    BEGIN
      if  trim(NVALUE) is not null then
        if length(trim(NVALUE))!=NLENGTH then
          v_error_seq    := v_error_seq + 1;
          v_iserror      := 1;
          v_strerrorcode := FNAME||' must be '||NLENGTH||' digits';
          v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' ' || FNAME || ': ' ||trim(NVALUE) || ' actual length = ' || length(trim(NVALUE)) || ' ';
          P_PRINT_ERROR();
        end if;
      else
        v_error_seq    := v_error_seq + 1;
        v_iserror      := 1;
        v_strerrorcode := FNAME||' can not be null';
        v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': is null';
        P_PRINT_ERROR();
      end if;
    END;




----------- validateand timestamp
    PROCEDURE P_validate_timestamp(
                              NVALUE  IN VARCHAR2,
                              FNAME IN VARCHAR2
                               ) IS
        BEGIN
          SELECT NVALUE
            INTO v_isdt
            FROM DUAL;
        EXCEPTION
          WHEN OTHERS THEN
            v_error_seq    := v_error_seq + 1;
            v_iserror      := 1;
            v_strerrorcode := FNAME||' format value must be timestamp';
            v_strerrordesc := 'UNIQUE_NUMBER: ' || v_uniq || ' '||FNAME||': ' ||
                              NVALUE ||
                              ' format is not timestamp';
            P_PRINT_ERROR();
        END;